/*
	Generated with DotSwagGen
	Generated from  {{ Model.Resourceurl}}
*/

using System;
using System.Collections.Generic;
using RestSharp;

namespace {{ Model.Namespace }}
{
	/// <summary>
	/// {{ Model.Description }}
	/// </summary>
	public class {{ Model.Name }}
	{

		protected IRestClient Client;

		public {{ Model.Name }}(string uri, string username, string password){
			this.Client = new RestClient(uri);
			this.Client.Authenticator = new HttpBasicAuthenticator(username, password);
		}

		public {{ Model.Name }}(IRestClient client) {
			this.Client = client;
		}

		public {{ Model.Name }}(string uri, IAuthenticator authenticator) {
			this.Client = new RestClient(uri);
			this.Client.Authenticator = authenticator;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected RestRequest GetNewRequest(string requestString, Method method)
		{
			RestRequest rtn = new RestRequest(requestString, method);
			return rtn;
		}

	{% for api in Model.Apis -%}
		{% for operation in api.Operations -%}{% assign parameters = operation.Parameters | sort: 'required' -%}
		/// <summary>
		/// {{ operation.Summary }}
		/// </summary>
		public {{ operation.Returntype }} {{ operation.Nickname }}({% for param in parameters -%} {{ param.Templatetype }} {{ param.Name | varname }}{% if forloop.last -%}{% else -%}, {% endif -%} {% endfor -%})
		{ 
			const string path = "{{ api.Path }}";
			var request = GetNewRequest(path, Method.{{ operation.Method }});
		{% for param in parameters %}
			{% if param.param_type == "path" %}request.AddUrlSegment("{{ param.name }}", {{ param.name | varname }}{% if param.Type != "string" %}.ToString(){% endif %});
			{% elsif  param.param_type == "query" %}request.AddParameter("{{ param.name }}", {{ param.name | varname }}{% if param.Type != "string" %}.ToString(){% endif %}, ParameterType.QueryString);
			{% elsif  param.param_type == "body" %}request.AddBody({{ param.name | varname }});{% endif %}
		{% endfor -%}
		{% if operation.Returntype == "void" %}
			var response = Client.Execute(request);
			if((int)response.StatusCode >= 200 && (int)response.StatusCode < 300)
				return;
		{% else %}
			var response = Client.Execute<{{ operation.Returntype }}>(request);
			if((int)response.StatusCode >= 200 && (int)response.StatusCode < 300)
				return response.Data;
		{% endif %}
			

			switch((int)response.StatusCode)
			{
			{% for response in operation.errorResponses -%}
				{{ response.code }}:
				throw new Exception(string.Format("{0}: {1}", {{ response.code }}, "{{ response.reason }}"));
			{% endfor -%}
				default:
					// Unknown server response
					throw new Exception(string.Format("Unknown response code {0}", response.StatusCode.ToString()));
			}
		}
		{% endfor -%}
	{% endfor -%}
	}
}